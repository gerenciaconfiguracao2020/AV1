@MockOrigem origem = null;@MockDestino destino = null;@Beforepublic void start() {MockitoAnnotations.initMocks(this);}@Testpublic void testeCalcularTotal(){Mockito.when(origem.leValores()).thenReturn("TotalGerado");Calcular calcular = new Calcular(origem, destino);try {calcular.calcularTotal();} catch (Exception e) {e.printStackTrace();}Mockito.verify(origem, Mockito.times(1)).leValores();Mockito.verify(destino, Mockito.times(1)).calcularValores("TotalGerado");}@Testpublic void testeSubotal(){Mockito.when(origem.leValores()).thenReturn("TotalGerado");Calcular calcular = new Calcular(origem, destino);try {calcular.calcularSubotal();} catch (Exception e) {e.printStackTrace();}Mockito.verify(origem, Mockito.times(1)).leValores();Mockito.verify(destino, Mockito.times(1)).calcularValores("TotalGerado");}@Testpublic void testFazerLogin(){Mockito.when(origem.Credenciais()).thenReturn("TesteCredenciais");Â Logar logar = new Logar(origem, destino);try {Logar.logarComCredenciais();} catch (Exception e) {e.printStackTrace();}Mockito.verify(origem, Mockito.times(1)).Credenciais();Mockito.verify(destino, Mockito.times(1)).salvarCredenciais("Credenciais");}